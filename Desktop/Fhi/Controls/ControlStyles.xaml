<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                    xmlns:converters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:ecosystemVitality="clr-namespace:Fhi.Controls.Indicators.EcosystemVitality"
                    xmlns:mvvm="clr-namespace:Fhi.Controls.MVVM"
                    xmlns:biodiversity="clr-namespace:FhiModel.EcosystemVitality.Biodiversity;assembly=FhiModel"
                    xmlns:local="clr-namespace:Fhi.Controls.Utils"
                    xmlns:common="clr-namespace:FhiModel.Common;assembly=FhiModel">
    <Style x:Key="OpenMenuButton"
           TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle"
                Value="{DynamicResource FocusVisual}" />
        <Setter Property="Background"
                Value="{DynamicResource MaterialDesignPaper}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource MaterialDesignPaper}" />
        <Setter Property="BorderThickness"
                Value="0,1,0,0" />
        <Setter Property="Foreground"
                Value="{DynamicResource PrimaryHueMidForegroundBrush}" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Height"
                Value="34" />
        <Setter Property="FontSize"
                Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border"
                            SnapsToDevicePixels="true"
                            Background="{DynamicResource MaterialDesignPaper}"
                            BorderBrush="{DynamicResource MaterialDesignPaper}"
                            BorderThickness="0">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          OpacityMask="Black" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted"
                                 Value="true" />
                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Margin"
                                    TargetName="contentPresenter"
                                    Value="1" />
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{DynamicResource PrimaryHueMidBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="BorderThickness"
                                    TargetName="border"
                                    Value="4,0,0,0" />
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="White" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource PrimaryHueLightBrush}" />
                            <Setter Property="Margin"
                                    TargetName="contentPresenter"
                                    Value="1,1,5,1" />
                        </Trigger>
                        <Trigger Property="IsFocused"
                                 Value="true">
                            <Setter Property="BorderThickness"
                                    TargetName="border"
                                    Value="4,0,0,0" />
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="White" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource PrimaryHueLightBrush}" />
                            <Setter Property="Margin"
                                    TargetName="contentPresenter"
                                    Value="1,1,5,1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="BackstageMenuButton"
           TargetType="{x:Type ToggleButton}">
        <Setter Property="FocusVisualStyle"
                Value="{DynamicResource FocusVisual}" />
        <Setter Property="Background"
                Value="{DynamicResource MaterialDesignDarkBackground}" />
        <Setter Property="BorderBrush"
                Value="{DynamicResource PrimaryHueDarkBrush}" />
        <Setter Property="BorderThickness"
                Value="0,1,0,0" />
        <Setter Property="Foreground"
                Value="#ffffffff" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Height"
                Value="34" />
        <Setter Property="FontSize"
                Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="border"
                            SnapsToDevicePixels="true"
                            Background="{DynamicResource PrimaryHueDarkBrush}"
                            BorderBrush="{DynamicResource PrimaryHueDarkBrush}"
                            BorderThickness="0">
                        <ContentPresenter x:Name="contentPresenter"
                                          Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          OpacityMask="Black" />
                    </Border>
                    <ControlTemplate.Triggers>


                        <Trigger Property="IsMouseOver"
                                 Value="true">
                            <Setter Property="Margin"
                                    TargetName="contentPresenter"
                                    Value="1" />
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="{DynamicResource PrimaryHueMidBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="true">
                            <Setter Property="BorderThickness"
                                    TargetName="border"
                                    Value="4,0,0,0" />
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="White" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource PrimaryHueLightBrush}" />
                            <Setter Property="Margin"
                                    TargetName="contentPresenter"
                                    Value="1,1,5,1" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                                 Value="true">
                            <Setter Property="BorderThickness"
                                    TargetName="border"
                                    Value="4,0,0,0" />
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="White" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource PrimaryHueLightBrush}" />
                            <Setter Property="Margin"
                                    TargetName="contentPresenter"
                                    Value="1,1,5,1" />
                        </Trigger>
                        <Trigger Property="IsFocused"
                                 Value="true">
                            <Setter Property="BorderThickness"
                                    TargetName="border"
                                    Value="4,0,0,0" />
                            <Setter Property="Background"
                                    TargetName="border"
                                    Value="White" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource PrimaryHueLightBrush}" />
                            <Setter Property="Margin"
                                    TargetName="contentPresenter"
                                    Value="1,1,5,1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <DataTemplate DataType="{x:Type ecosystemVitality:SpeciesViewModel}">
        <materialDesign:Card Margin="5"
                             MinWidth="250"
                             HorizontalAlignment="Left">
            <materialDesign:Card.Resources>
                <ObjectDataProvider MethodName="GetValues"
                                    ObjectType="{x:Type sys:Enum}"
                                    x:Key="RedListCodeValues">
                    <ObjectDataProvider.MethodParameters>
                        <x:Type TypeName="biodiversity:RedListCode" />
                    </ObjectDataProvider.MethodParameters>
                </ObjectDataProvider>
                <mvvm:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
            </materialDesign:Card.Resources>

            <Grid Margin="3">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <TextBlock Margin="2"
                           Grid.Row="0"
                           RenderOptions.ClearTypeHint="Enabled"
                           TextOptions.TextRenderingMode="ClearType"
                           VerticalAlignment="Center"
                           HorizontalAlignment="Center"
                           Visibility="{Binding HasFullName, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                <Run Text="{Binding Species.Common}" />
                                                <Run Text="("
                                                     FontStyle="Italic" /><Run Text="{Binding Species.Binomial}"
                                                                               FontStyle="Italic" /><Run Text=")"
                                                                                                         FontStyle="Italic" /></TextBlock>
                <TextBlock Margin="2"
                           Grid.Row="0"
                           VerticalAlignment="Center"
                           HorizontalAlignment="Center"
                           Visibility="{Binding HasFullName, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=Inverted}">
                                                <Run Text="{Binding Species.Binomial}"
                                                     FontStyle="Italic" /></TextBlock>
                <TextBlock Grid.Row="1"
                           Margin="2"
                           Visibility="{Binding HasTaxa, Converter={StaticResource BooleanToVisibilityConverter}}">
                                                <Run Text="{Binding Species.Family}" /><Run Text="/" /><Run Text="{Binding Species.Genus}" /></TextBlock>
                <TextBlock Margin="2"
                           Grid.Row="2">
                                                <Run Text="{Binding Species.Citation}" />
                                                <Run Text="{Binding Species.Year}" /></TextBlock>
                <TextBlock Margin="2"
                           Grid.Row="3">
                                                <Run Text="{Binding CodeDescription, Mode=OneWay}" /></TextBlock>
                <Button ToolTip="Modify this item"
                        Command="{Binding EditCommand}"
                        Style="{StaticResource MaterialDesignFlatButton}"
                        Grid.Row="3"
                        Margin="0"
                        Padding="0"
                        Height="15"
                        Width="20"
                        HorizontalContentAlignment="Center"
                        HorizontalAlignment="Right"
                        VerticalAlignment="Bottom">
                    <materialDesign:PackIcon Kind="EllipsisHorizontal" />
                </Button>
                <StackPanel Orientation="Horizontal"
                            HorizontalAlignment="Right"
                            VerticalAlignment="Top"
                            Visibility="{Binding HasAdd, Converter={StaticResource BooleanToVisibilityConverter}}"
                            Grid.Row="0">
                    <TextBlock Visibility="{Binding HasCode, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=Inverted}"
                               Margin="2"
                               Text="Select Code:"
                               FontWeight="Bold"
                               VerticalAlignment="Center" />
                    <TextBlock Text="{Binding Species.Code}"
                               VerticalAlignment="Center"
                               Visibility="{Binding Species.UserCanChangeCode, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=Inverted}"
                               Margin="10,2" />
                    <ComboBox SelectedItem="{Binding Species.Code}"
                              ItemsSource="{Binding Source={StaticResource RedListCodeValues}}"
                              Visibility="{Binding Species.UserCanChangeCode, Converter={StaticResource BooleanToVisibilityConverter}}"
                              Margin="10,2"
                              VerticalContentAlignment="Center" />
                    <Button Command="{Binding AddCommand}"
                            Style="{StaticResource MaterialDesignFloatingActionMiniAccentButton}"
                            ToolTip="Add species to assessment"
                            IsEnabled="{Binding HasCode}"
                            Margin="0"
                            Padding="0"
                            Height="20"
                            Width="20"
                            HorizontalAlignment="Right">
                        <materialDesign:PackIcon Kind="Plus" />
                    </Button>
                </StackPanel>
                <Button Visibility="{Binding HasAdd, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter=Inverted}"
                        Grid.Row="0"
                        Command="{Binding RemoveCommand}"
                        ToolTip="Remove species from assessment"
                        Margin="2"
                        Padding="0"
                        Height="20"
                        Width="20"
                        HorizontalAlignment="Right">
                    <materialDesign:PackIcon Kind="Close" />
                </Button>
            </Grid>
        </materialDesign:Card>
    </DataTemplate>
    <Style TargetType="{x:Type local:PillarIndicator}">
        <Setter Property="materialDesign:ShadowAssist.ShadowDepth"
                Value="Depth1" />
        <Setter Property="HorizontalAlignment"
                Value="Stretch" />
        <Setter Property="Width"
                Value="130" />
        <Setter Property="Height"
                Value="130" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:PillarIndicator}">
                    <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(materialDesign:ShadowAssist.CacheMode)}">
                        <Grid>
                            <Grid.Resources>
                                <local:IndicatorColorConverter x:Key="IndicatorColorConverter" />
                                <local:IndicatorValueConverter x:Key="IndicatorValueConverter" />
                                <mvvm:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                                <local:UncertaintyToVisibilityConverter x:Key="UncertaintyToVisibilityConverter" />
                            </Grid.Resources>
                            <Border Background="White"
                                    CornerRadius="{Binding Path=ActualHeight, ElementName=outerBorder}"
                                    BorderThickness="8"
                                    BorderBrush="{Binding Indicator.Value, Converter={StaticResource IndicatorColorConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                    x:Name="outerBorder"
                                    Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ShadowAssist.ShadowDepth), Converter={x:Static converters:ShadowConverter.Instance}}">
                                <Border Background="White"
                                        CornerRadius="{Binding Path=ActualHeight, ElementName=innerBorder}"
                                        BorderThickness="6"
                                        BorderBrush="#FFE6E7E8"
                                        x:Name="innerBorder" />
                            </Border>
                            <Grid ToolTipService.IsEnabled="{Binding Indicator.HasMetadata, RelativeSource={RelativeSource TemplatedParent}}">
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid.ToolTip>
                                    <StackPanel>
                                        <TextBlock Visibility="{Binding Indicator.Rank, Converter={StaticResource UncertaintyToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                            <Run Text="Uncertainty:" />
                                            <Run Text="{Binding Indicator.Rank, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </TextBlock>
                                        <TextBlock Visibility="{Binding Indicator.Notes, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                            <Run Text="{Binding Indicator.Notes, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </TextBlock>
                                    </StackPanel>
                                </Grid.ToolTip>
                                <Grid.ContextMenu>
                                    <ContextMenu>
                                        <MenuItem Header="Help"
                                                  Command="{x:Static local:GlobalCommands.HelpCommand}"
                                                  CommandParameter="{Binding ContextHelp, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <MenuItem Header="Edit Metadata"
                                                  Command="{x:Static local:IndicatorMetadataViewModel.DialogCommand}"
                                                  CommandParameter="{Binding Indicator, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </ContextMenu>
                                </Grid.ContextMenu>
                                <TextBlock Text="{Binding IndicatorName, RelativeSource={RelativeSource TemplatedParent}}"
                                           FontWeight="Bold"
                                           HorizontalAlignment="Center"
                                           VerticalAlignment="Bottom"
                                           TextWrapping="Wrap"
                                           TextAlignment="Center"
                                           Foreground="{DynamicResource PrimaryHueLightForegroundBrush}"
                                           Grid.Row="0" />
                                <StackPanel Orientation="Horizontal"
                                            Grid.Row="1"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Top"
                                            Margin="0,-5,0,0">
                                    <TextBlock Text="{Binding Indicator.Value, Converter={StaticResource IndicatorValueConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                               FontSize="45"
                                               FontWeight="Bold"
                                               Foreground="{Binding Indicator.Value, Converter={StaticResource IndicatorColorConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <materialDesign:PackIcon Kind="Asterisk"
                                                             Margin="0,10,0,0"
                                                             Height="10"
                                                             Width="10"
                                                             ToolTip="{Binding Indicator.OverrideComment, RelativeSource={RelativeSource TemplatedParent}}"
                                                             Visibility="{Binding Indicator.UserOverride, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                                             HorizontalAlignment="Right"
                                                             VerticalAlignment="Top" />

                                </StackPanel>
                            </Grid>
                        </Grid>
                    </AdornerDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="outerBorder"
                                    Property="materialDesign:ShadowAssist.Darken"
                                    Value="True" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter TargetName="outerBorder"
                                    Property="materialDesign:ShadowAssist.Darken"
                                    Value="True" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Opacity"
                                    Value="0.23" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type local:SubIndicator}">
        <Setter Property="materialDesign:ShadowAssist.ShadowDepth"
                Value="Depth2" />
        <Setter Property="HorizontalAlignment"
                Value="Stretch" />
        <Setter Property="Width"
                Value="120" />
        <Setter Property="Height"
                Value="120" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SubIndicator}">
                    <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(materialDesign:ShadowAssist.CacheMode)}">
                        <Grid>
                            <Grid.Resources>
                                <local:IndicatorColorConverter x:Key="IndicatorColorConverter" />
                                <local:IndicatorValueConverter x:Key="IndicatorValueConverter" />
                                <mvvm:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                                <local:UncertaintyToVisibilityConverter x:Key="UncertaintyToVisibilityConverter" />
                            </Grid.Resources>
                            <Border Background="White"
                                    CornerRadius="{Binding Path=ActualHeight, ElementName=border}"
                                    BorderThickness="6"
                                    BorderBrush="{Binding Indicator.Value, Converter={StaticResource IndicatorColorConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                    x:Name="border"
                                    Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ShadowAssist.ShadowDepth), Converter={x:Static converters:ShadowConverter.Instance}}" />
                            <Grid ToolTipService.IsEnabled="{Binding Indicator.HasMetadata, RelativeSource={RelativeSource TemplatedParent}}">
                                <Grid.RowDefinitions>
                                    <RowDefinition />
                                    <RowDefinition />
                                </Grid.RowDefinitions>
                                <Grid.ToolTip>
                                    <StackPanel>
                                        <TextBlock Visibility="{Binding Indicator.Rank, Converter={StaticResource UncertaintyToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                            <Run Text="Uncertainty:" />
                                            <Run Text="{Binding Indicator.Rank, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </TextBlock>
                                        <TextBlock Visibility="{Binding Indicator.Notes, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                                   TextWrapping="Wrap">
                                            <Run Text="{Binding Indicator.Notes, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </TextBlock>
                                    </StackPanel>
                                </Grid.ToolTip>
                                <Grid.ContextMenu>
                                    <ContextMenu>
                                        <MenuItem Header="Help"
                                                  Command="{x:Static local:GlobalCommands.HelpCommand}"
                                                  CommandParameter="{Binding ContextHelp, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <MenuItem Header="Edit Metadata"
                                                  Command="{x:Static local:IndicatorMetadataViewModel.DialogCommand}"
                                                  CommandParameter="{Binding Indicator, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </ContextMenu>
                                </Grid.ContextMenu>
                                <TextBlock Text="{Binding IndicatorName, RelativeSource={RelativeSource TemplatedParent}}"
                                           FontWeight="Bold"
                                           HorizontalAlignment="Center"
                                           VerticalAlignment="Bottom"
                                           TextWrapping="Wrap"
                                           TextAlignment="Center"
                                           Foreground="{DynamicResource PrimaryHueLightForegroundBrush}"
                                           Grid.Row="0" />
                                <StackPanel Orientation="Horizontal"
                                            Grid.Row="1"
                                            HorizontalAlignment="Center"
                                            VerticalAlignment="Top"
                                            Margin="0,-5,0,0">
                                    <TextBlock Text="{Binding Indicator.Value, Converter={StaticResource IndicatorValueConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                               FontSize="45"
                                               FontWeight="Bold"
                                               Foreground="{Binding Indicator.Value, Converter={StaticResource IndicatorColorConverter}, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <materialDesign:PackIcon Kind="Asterisk"
                                                             Margin="0,10,0,0"
                                                             Height="10"
                                                             Width="10"
                                                             ToolTip="{Binding Indicator.OverrideComment, RelativeSource={RelativeSource TemplatedParent}}"
                                                             Visibility="{Binding Indicator.UserOverride, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                                             HorizontalAlignment="Right"
                                                             VerticalAlignment="Top" />
                                </StackPanel>
                            </Grid>
                        </Grid>
                    </AdornerDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="border"
                                    Property="materialDesign:ShadowAssist.Darken"
                                    Value="True" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter TargetName="border"
                                    Property="materialDesign:ShadowAssist.Darken"
                                    Value="True" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Opacity"
                                    Value="0.23" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type local:LeafIndicator}">
        <Setter Property="Background"
                Value="{DynamicResource MaterialDesignCardBackground}" />
        <Setter Property="VerticalAlignment"
                Value="Top" />
        <Setter Property="materialDesign:ShadowAssist.ShadowDepth"
                Value="Depth2" />
        <Setter Property="Focusable"
                Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:LeafIndicator}">
                    <ControlTemplate.Resources>
                        <converters:ShadowEdgeConverter x:Key="ShadowEdgeConverter" />
                    </ControlTemplate.Resources>
                    <Grid Background="Transparent">
                        <AdornerDecorator CacheMode="{Binding RelativeSource={RelativeSource Self}, Path=(materialDesign:ShadowAssist.CacheMode)}">
                            <AdornerDecorator.OpacityMask>
                                <MultiBinding Converter="{StaticResource ShadowEdgeConverter}">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ActualWidth" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="ActualHeight" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="(materialDesign:ShadowAssist.ShadowDepth)" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                                             Path="(materialDesign:ShadowAssist.ShadowEdges)" />
                                </MultiBinding>
                            </AdornerDecorator.OpacityMask>
                            <Border Effect="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(materialDesign:ShadowAssist.ShadowDepth), Converter={x:Static converters:ShadowConverter.Instance}}"
                                    CornerRadius="{TemplateBinding UniformCornerRadius}">
                                <Border Background="{TemplateBinding Background}"
                                        Padding="{TemplateBinding Padding}"
                                        x:Name="PART_ClipBorder"
                                        Clip="{TemplateBinding ContentClip}" />
                            </Border>
                        </AdornerDecorator>

                        <Button Style="{StaticResource MaterialDesignFlatButton}"
                                Command="{Binding EditCommand, RelativeSource={RelativeSource TemplatedParent}}"
                                CommandParameter="{Binding}"
                                Margin="5"
                                Height="Auto">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.Resources>
                                    <local:IndicatorColorConverter x:Key="IndicatorColorConverter" />
                                    <local:IndicatorValueConverter x:Key="IndicatorValueConverter" />
                                    <mvvm:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                                    <local:UncertaintyToVisibilityConverter x:Key="UncertaintyToVisibilityConverter" />
                                    <local:EvidenceVisibilityConverter x:Key="EvidenceVisibilityConverter"/>
                                </Grid.Resources>
                                <Grid.ContextMenu>
                                    <ContextMenu>
                                        <MenuItem Header="Help"
                                                  Command="{x:Static local:GlobalCommands.HelpCommand}"
                                                  CommandParameter="{Binding ContextHelp, RelativeSource={RelativeSource TemplatedParent}}" />
                                        <MenuItem Header="Edit Metadata"
                                                  Command="{x:Static local:IndicatorMetadataViewModel.DialogCommand}"
                                                  CommandParameter="{Binding Indicator, RelativeSource={RelativeSource TemplatedParent}}" />
                                    </ContextMenu>
                                </Grid.ContextMenu>
                                <Grid.ToolTip>
                                    <StackPanel>
                                        <TextBlock Visibility="{Binding Indicator.Rank, Converter={StaticResource UncertaintyToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                            <Run Text="Uncertainty:" />
                                            <Run Text="{Binding Indicator.Rank, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </TextBlock>
                                        <TextBlock Visibility="{Binding Indicator.Notes, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                                   TextWrapping="Wrap">
                                            <Run Text="{Binding Indicator.Notes, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </TextBlock>
                                    </StackPanel>
                                </Grid.ToolTip>
                                <TextBlock Text="{Binding IndicatorName, RelativeSource={RelativeSource TemplatedParent}}"
                                           Grid.Row="0"
                                           TextWrapping="Wrap"
                                           HorizontalAlignment="Center"
                                           Foreground="Gray" />
                                <StackPanel Grid.Row="1"
                                            Orientation="Horizontal"
                                            HorizontalAlignment="Center">
                                    <TextBlock Visibility="{Binding Indicator.Value.HasValue, Converter={StaticResource BooleanToVisibilityConverter}, RelativeSource={RelativeSource TemplatedParent}}"
                                               Foreground="{Binding Indicator.Value, Converter={StaticResource IndicatorColorConverter}, RelativeSource={RelativeSource TemplatedParent}}">
                                        <Run Text="{Binding Indicator.Value, RelativeSource={RelativeSource TemplatedParent}}"
                                             FontWeight="Bold"
                                             FontSize="18"/></TextBlock>

                                    <TextBlock Visibility="{Binding Indicator, RelativeSource={RelativeSource TemplatedParent} , Converter={StaticResource EvidenceVisibilityConverter} }"
                                               Foreground="Gray"
                                               FontSize="12"
                                               VerticalAlignment="Center">
                                        <Run Text=" [" /><Run Text="{Binding Indicator.EvidenceLevel, RelativeSource={RelativeSource TemplatedParent}}" /><Run Text="]" /></TextBlock>
                                    
                                    <TextBlock Margin="5,2"
                                               Foreground="Gray"
                                               FontSize="10"
                                               VerticalAlignment="Center">
                                        <Run Text="(" /><Run Text="{Binding Indicator.Weight, StringFormat=F2, RelativeSource={RelativeSource TemplatedParent}}"></Run><Run Text=")" /></TextBlock>
                                </StackPanel>
                            </Grid>
                        </Button>
                    </Grid>

                    <!--
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="border"
                                    Property="materialDesign:ShadowAssist.Darken"
                                    Value="True" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused"
                                 Value="true">
                            <Setter TargetName="border"
                                    Property="materialDesign:ShadowAssist.Darken"
                                    Value="True" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="false">
                            <Setter Property="Opacity"
                                    Value="0.23" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    -->
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ContextHelp}">
        <Setter Property="Width"
                Value="20" />
        <Setter Property="Height"
                Value="20" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="BorderBrush"
                Value="Transparent" />
        <Setter Property="ToolTip"
                Value="Help!" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ContextHelp}">
                    <materialDesign:PackIcon Kind="HelpOutline" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>

    </Style>
</ResourceDictionary>